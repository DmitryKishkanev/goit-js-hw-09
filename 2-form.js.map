{"version":3,"file":"2-form.js","sources":["../src/js/form/2-form.js"],"sourcesContent":["import throttle from 'lodash.throttle';\nimport '../../css/form.css';\n\n// Получем в переменную нашу форму из HTML\nconst formEl = document.querySelector('.feedback-form');\n\n// Переменная для хранения localStorage ключа\nconst STORAGE_KEY = 'feedback-form-state';\n\n// Создаём объект с пустыми свойствами для записи данных и сохранения его в localStorage\nconst formData = {\n  email: '',\n  message: '',\n};\n\n// Слушатель события ввода данных и throttle (функия выполняется один раз в указанный промежкток времени)\nformEl.addEventListener('input', throttle(onInput, 500));\n// Слушатель события отправки данных\nformEl.addEventListener('submit', onFormSubmit);\n\n// Вызов функции записи данных в форму из localStorage и передача ему аргументом нашей формы\npopulateForm(formEl);\n\n// Функция обработчика слушателя события ввода данных (по методу делегирования)\nfunction onInput(evt) {\n  // formData.email = formEl.elements.email.value.trim(); // Обращение к элементу формы напрямую\n  // formData.message = formEl.elements.message.value.trim(); // Обращение к элементу формы напрямую\n\n  const { name, value } = evt.target;\n  formData[name] = value.trim();\n\n  // Проверяем, есть ли хотябы одно поле, значение которого не пустое\n  const hasData = Object.values(formData).some(field => field !== '');\n\n  if (hasData) {\n    localStorage.setItem(STORAGE_KEY, JSON.stringify(formData));\n  } else {\n    localStorage.removeItem(STORAGE_KEY);\n    return;\n  }\n}\n\n// Функция обработчика слушателя события отправки данных (по методу делегирования)\nfunction onFormSubmit(evt) {\n  evt.preventDefault();\n\n  const { email, message } = formData;\n  if (!email || !message) {\n    window.alert('Fill please all fields');\n    return;\n  }\n  const formDataSnapshot = { ...formData };\n  console.log(formDataSnapshot);\n\n  // Очистка данных\n  localStorage.removeItem(STORAGE_KEY);\n  formEl.reset();\n  formData.email = '';\n  formData.message = '';\n}\n\n// Функция записи данных в форму из localStorage\nfunction populateForm(form) {\n  const savedForm = JSON.parse(localStorage.getItem(STORAGE_KEY));\n\n  if (savedForm) {\n    Object.keys(savedForm).forEach(key => {\n      if (form.elements[key]) {\n        form.elements[key].value = savedForm[key];\n        formData[key] = savedForm[key];\n      }\n    });\n  }\n}\n"],"names":["formEl","STORAGE_KEY","formData","throttle","onInput","onFormSubmit","populateForm","evt","name","value","field","email","message","formDataSnapshot","form","savedForm","key"],"mappings":"oGAIA,MAAMA,EAAS,SAAS,cAAc,gBAAgB,EAGhDC,EAAc,sBAGdC,EAAW,CACf,MAAO,GACP,QAAS,EACX,EAGAF,EAAO,iBAAiB,QAASG,EAASC,EAAS,GAAG,CAAC,EAEvDJ,EAAO,iBAAiB,SAAUK,CAAY,EAG9CC,EAAaN,CAAM,EAGnB,SAASI,EAAQG,EAAK,CAIpB,KAAM,CAAE,KAAAC,EAAM,MAAAC,GAAUF,EAAI,OAM5B,GALAL,EAASM,CAAI,EAAIC,EAAM,KAAI,EAGX,OAAO,OAAOP,CAAQ,EAAE,KAAKQ,GAASA,IAAU,EAAE,EAGhE,aAAa,QAAQT,EAAa,KAAK,UAAUC,CAAQ,CAAC,MACrD,CACL,aAAa,WAAWD,CAAW,EACnC,MACD,CACH,CAGA,SAASI,EAAaE,EAAK,CACzBA,EAAI,eAAc,EAElB,KAAM,CAAE,MAAAI,EAAO,QAAAC,CAAS,EAAGV,EAC3B,GAAI,CAACS,GAAS,CAACC,EAAS,CACtB,OAAO,MAAM,wBAAwB,EACrC,MACD,CACD,MAAMC,EAAmB,CAAE,GAAGX,GAC9B,QAAQ,IAAIW,CAAgB,EAG5B,aAAa,WAAWZ,CAAW,EACnCD,EAAO,MAAK,EACZE,EAAS,MAAQ,GACjBA,EAAS,QAAU,EACrB,CAGA,SAASI,EAAaQ,EAAM,CAC1B,MAAMC,EAAY,KAAK,MAAM,aAAa,QAAQd,CAAW,CAAC,EAE1Dc,GACF,OAAO,KAAKA,CAAS,EAAE,QAAQC,GAAO,CAChCF,EAAK,SAASE,CAAG,IACnBF,EAAK,SAASE,CAAG,EAAE,MAAQD,EAAUC,CAAG,EACxCd,EAASc,CAAG,EAAID,EAAUC,CAAG,EAErC,CAAK,CAEL"}